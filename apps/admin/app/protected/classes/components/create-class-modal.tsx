"use client";

import { useState, useEffect } from "react";
import { Button } from "@repo/ui";
import { createClass, getClientsAndManagers } from "@/actions/classActions";
import { getStocks } from "@/actions/stockActions";
import { generateGameData } from "@/actions/gameDataActions";
import { Manager, Client, Stock } from "@/types";
import { Modal } from "@/components/common/modal";

interface CreateClassModalProps {
  isOpen: boolean;
  setIsOpen: (open: boolean) => void;
  onClassCreated: (newClass: any) => void;
}

export function CreateClassModal({
  isOpen,
  setIsOpen,
  onClassCreated,
}: CreateClassModalProps) {
  const [clients, setClients] = useState<Partial<Client>[]>([]);
  const [managers, setManagers] = useState<Partial<Manager>[]>([]);
  const [stocks, setStocks] = useState<Stock[]>([]);
  const [selectedClientId, setSelectedClientId] = useState("");
  const [selectedStockIds, setSelectedStockIds] = useState<string[]>([]);
  const [filteredManagers, setFilteredManagers] = useState<Partial<Manager>[]>(
    []
  );
  const [isLoading, setIsLoading] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isGeneratingGameData, setIsGeneratingGameData] = useState(false);
  const [autoGenerateData, setAutoGenerateData] = useState(true);

  useEffect(() => {
    if (isOpen) {
      loadClientsAndManagers();
      loadStocks();
    }
  }, [isOpen]);

  useEffect(() => {
    if (selectedClientId) {
      setFilteredManagers(
        managers.filter((m) => m.clientId === selectedClientId)
      );
    } else {
      setFilteredManagers([]);
    }
  }, [selectedClientId, managers]);

  const loadStocks = async () => {
    try {
      const stocksData = await getStocks();
      setStocks(stocksData);
      // 모든 주식을 기본 선택
      setSelectedStockIds(stocksData.map((stock) => stock.id));
    } catch (error) {
      console.error("Error loading stocks:", error);
      alert("주식 목록을 불러오는 중 오류가 발생했습니다.");
    }
  };

  const loadClientsAndManagers = async () => {
    setIsLoading(true);
    try {
      const data = await getClientsAndManagers();

      // withAuth의 ActionState 타입 처리
      if ("success" in data && !data.success) {
        alert(`데이터 로드 실패: ${data.message}`);
        return;
      }

      // 성공 시 데이터 설정
      if ("clients" in data && "managers" in data) {
        setClients(data.clients);
        setManagers(data.managers);
      }
    } catch (error) {
      console.error("Error loading clients and managers:", error);
      alert("데이터를 불러오는 중 오류가 발생했습니다.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();

    // 게임 데이터 자동 생성이 활성화되어 있고 주식이 선택되지 않은 경우
    if (autoGenerateData && selectedStockIds.length === 0) {
      alert(
        "게임 데이터를 자동 생성하려면 최소 1개 이상의 주식을 선택해야 합니다."
      );
      return;
    }

    setIsSubmitting(true);

    const formData = new FormData(e.target as HTMLFormElement);

    try {
      // 1. 클래스 생성
      const result = await createClass(formData);

      // withAuth의 ActionState 타입 처리 (errors 필드)
      if ("success" in result && !result.success) {
        alert(`생성 실패: ${result.message}`);
        return;
      }

      // 액션의 실제 반환 타입 처리 (error 필드)
      if ("error" in result && result.error) {
        if ("_form" in result.error) {
          alert("생성 실패: " + result.error._form?.[0]);
        } else {
          const errors = Object.values(result.error).flat();
          alert("생성 실패: " + errors.join(", "));
        }
        return;
      }

      if (!("data" in result) || !result.data) {
        alert("클래스 생성 후 데이터를 가져오지 못했습니다.");
        return;
      }

      const createdClass = result.data;

      // 2. 게임 데이터 자동 생성
      if (autoGenerateData && selectedStockIds.length > 0) {
        setIsGeneratingGameData(true);
        const totalDays = parseInt(formData.get("totalDays") as string, 10);
        const selectedStocks = stocks.filter((s) =>
          selectedStockIds.includes(s.id)
        );

        const gameDataResult = await generateGameData({
          classId: createdClass.id,
          totalDays,
          stocks: selectedStocks.map((s) => ({
            id: s.id,
            name: s.name,
            marketCountryCode: s.marketCountryCode,
            industrySector: s.industrySector,
          })),
        });

        setIsGeneratingGameData(false);
        if (!gameDataResult.success) {
          alert(
            `클래스는 생성되었지만 게임 데이터 생성 실패: ${gameDataResult.message}`
          );
        } else {
          alert(
            `${result.message}\n게임 데이터도 성공적으로 생성되었습니다! 🎉`
          );
        }
      } else {
        alert(result.message);
      }

      onClassCreated(createdClass);
      setIsOpen(false);

      // 폼 리셋
      (e.target as HTMLFormElement).reset();
      setSelectedClientId("");
      setSelectedStockIds([]);
    } catch (error) {
      console.error("Error creating class:", error);
      alert("생성 중 오류가 발생했습니다.");
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Modal
      isOpen={isOpen}
      onClose={() => setIsOpen(false)}
      title="새 수업 추가"
      size="md"
    >
      {isLoading ? (
        <div className="text-center py-4">데이터를 불러오는 중...</div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label
              htmlFor="name"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              수업명 *
            </label>
            <input
              type="text"
              id="name"
              name="name"
              required
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>

          <div>
            <label
              htmlFor="totalDays"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              총 게임 일수 *
            </label>
            <input
              type="number"
              id="totalDays"
              name="totalDays"
              required
              min="1"
              defaultValue={8}
              className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
            <p className="mt-1 text-xs text-gray-500">
              게임이 진행될 총 일수를 입력하세요 (예: 8일)
            </p>
          </div>

          <div>
            <label
              htmlFor="clientId"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              클라이언트 *
            </label>
            <select
              id="clientId"
              name="clientId"
              required
              value={selectedClientId}
              onChange={(e) => setSelectedClientId(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            >
              <option value="">클라이언트를 선택하세요</option>
              {clients.map((client) => (
                <option key={client.id} value={client.id}>
                  {client.name}
                </option>
              ))}
            </select>
          </div>

          <div>
            <label
              htmlFor="managerId"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              담당 매니저 *
            </label>
            <select
              id="managerId"
              name="managerId"
              required
              disabled={!selectedClientId}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 disabled:bg-gray-100"
            >
              <option value="">
                {selectedClientId
                  ? "매니저를 선택하세요"
                  : "먼저 클라이언트를 선택하세요"}
              </option>
              {filteredManagers.map((manager) => (
                <option key={manager.id} value={manager.id}>
                  {manager.name}
                </option>
              ))}
            </select>
          </div>

          {/* 게임 데이터 자동 생성 옵션 */}
          <div className="border-t pt-4">
            <div className="mb-3">
              <div className="flex items-center gap-2 mb-2">
                <input
                  type="checkbox"
                  id="autoGenerateData"
                  checked={autoGenerateData}
                  onChange={(e) => setAutoGenerateData(e.target.checked)}
                  className="w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500"
                />
                <label
                  htmlFor="autoGenerateData"
                  className="text-sm font-medium text-gray-700"
                >
                  게임 데이터 자동 생성 (AI)
                </label>
              </div>
              {autoGenerateData && (
                <div className="ml-6 p-3 bg-amber-50 border border-amber-200 rounded-lg">
                  <div className="flex items-start gap-2">
                    <svg
                      className="w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5"
                      fill="currentColor"
                      viewBox="0 0 20 20"
                    >
                      <path
                        fillRule="evenodd"
                        d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z"
                        clipRule="evenodd"
                      />
                    </svg>
                    <div className="text-sm">
                      <p className="font-semibold text-amber-900 mb-1">
                        AI 데이터 생성에 시간이 소요됩니다
                      </p>
                      <p className="text-amber-800">
                        선택한 주식과 일수에 따라 <strong>30초~5분</strong> 정도
                        걸릴 수 있습니다. 완료될 때까지 창을 닫지 마세요.
                      </p>
                    </div>
                  </div>
                </div>
              )}
            </div>

            {autoGenerateData && (
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  사용할 주식 선택 *
                </label>
                <div className="min-h-32 max-h-40 overflow-y-auto border border-gray-300 rounded-md p-3 space-y-2 bg-white">
                  {stocks.length === 0 ? (
                    <p className="text-sm text-gray-500 text-center py-4">
                      등록된 주식이 없습니다. 먼저 주식을 등록해주세요.
                    </p>
                  ) : (
                    stocks.map((stock) => (
                      <label
                        key={stock.id}
                        className="flex items-center gap-2 cursor-pointer hover:bg-gray-50 p-1 rounded"
                      >
                        <input
                          type="checkbox"
                          checked={selectedStockIds.includes(stock.id)}
                          onChange={(e) => {
                            if (e.target.checked) {
                              setSelectedStockIds([
                                ...selectedStockIds,
                                stock.id,
                              ]);
                            } else {
                              setSelectedStockIds(
                                selectedStockIds.filter((id) => id !== stock.id)
                              );
                            }
                          }}
                          className="w-4 h-4 text-blue-600 rounded focus:ring-2 focus:ring-blue-500"
                        />
                        <span className="text-sm">
                          {stock.name}
                          <span className="text-gray-500 ml-1">
                            ({stock.marketCountryCode} / {stock.industrySector})
                          </span>
                        </span>
                      </label>
                    ))
                  )}
                </div>
                <p className="mt-2 text-xs text-gray-500">
                  선택한 주식으로 AI가 자동으로 뉴스와 가격 데이터를 생성합니다.
                  (마지막 날은 뉴스 없음)
                </p>
              </div>
            )}
          </div>

          <div>
            <label
              htmlFor="start_date"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              시작일 *
            </label>
            <input
              type="date"
              id="start_date"
              name="start_date"
              required
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div>
            <label
              htmlFor="end_date"
              className="block text-sm font-medium text-gray-700 mb-1"
            >
              종료일 (선택사항)
            </label>
            <input
              type="date"
              id="end_date"
              name="end_date"
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
            />
          </div>

          <div className="flex gap-2 justify-end pt-4">
            <Button
              type="button"
              onClick={() => setIsOpen(false)}
              variant="ghost"
              className="px-4 py-2"
            >
              취소
            </Button>
            <Button
              type="submit"
              disabled={isSubmitting}
              className="px-4 py-2 bg-blue-500 hover:bg-blue-600 text-white disabled:bg-gray-400 disabled:cursor-not-allowed"
            >
              {isSubmitting ? (
                <span className="flex items-center gap-2">
                  <svg
                    className="animate-spin h-4 w-4"
                    fill="none"
                    viewBox="0 0 24 24"
                  >
                    <circle
                      className="opacity-25"
                      cx="12"
                      cy="12"
                      r="10"
                      stroke="currentColor"
                      strokeWidth="4"
                    />
                    <path
                      className="opacity-75"
                      fill="currentColor"
                      d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                    />
                  </svg>
                  {isGeneratingGameData
                    ? "AI 게임 데이터 생성 중..."
                    : "수업 생성 중..."}
                </span>
              ) : (
                "생성"
              )}
            </Button>
          </div>
        </form>
      )}
    </Modal>
  );
}
